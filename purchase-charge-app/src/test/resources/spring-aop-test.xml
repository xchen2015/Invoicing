<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- <aop:aspectj-autoproxy proxy-target-class="false" /> -->
	
	<bean id="logManagement" class="com.cxx.purchasecharge.app.aop.LogManagementAspect" />
	
	<bean id="logManagementAroundAdvice"
		class="com.cxx.purchasecharge.app.aop.LogManagementAroundAdvice" />

	<bean id="aopDao" class="com.cxx.purchasecharge.app.aop.AopDaoImpl" />
	
	<aop:config proxy-target-class="false">
		<!--调用日志类 -->
		<aop:pointcut id="logScope3"
			expression="execution(* com.cxx.purchasecharge.app.aop.AopDao.add*(..))" />
		<aop:pointcut id="logScope2"
			expression="execution(* com.cxx.purchasecharge.app.aop.AopDao.update*(..))" />
		<aop:pointcut id="logScope"
			expression="execution(* com.cxx.purchasecharge.app.aop.AopDao.delete*(..))" />
		<aop:pointcut id="logScope4"
			expression="execution(* com.cxx.purchasecharge.app.aop.AopDao.delete*(..))" />
			
		<!-- <aop:advisor id="aroundAdvice" advice-ref="logManagementAroundAdvice" pointcut-ref="logScope2" /> -->
			
		<aop:aspect id="logAspect" ref="logManagement">
			<!--配置在com.dao包下所有的类的delete方法，在调用之前都会被拦截 -->
			<!--在com.dao包下所有的类的delete方法执行之前会调用LogManagement中的before方法 -->
			<aop:before pointcut-ref="logScope" method="before" />
			<!--配置在com.dao包下所有的类的update方法，在调用之前都会被拦截 -->
			<!--在com.dao包下所有的类的update方法执行之前会调用LogManagement中的around方法 -->
			<aop:around pointcut-ref="logScope2" method="around" />
			<!--配置在com.dao包下所有的类的add方法，在调用之前都会被拦截 -->
			<!--在com.dao包下所有的类的add方法执行之前会调用LogManagement中的after方法 -->
			<aop:after pointcut-ref="logScope3" method="after" />
			<aop:after pointcut-ref="logScope4" method="after" />
		</aop:aspect>
	</aop:config>
	
	
	
	<!-- <bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
	</bean>
	<bean id="logManagementAroundAdvice"
		class="com.cxx.purchasecharge.aop.LogManagementAroundAdvice" />

	<bean id="logManagementAroundRegexpAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"
		p:patterns="com.cxx.purchasecharge.aop.AopDao.*update"
		p:advice-ref="logManagementAroundAdvice" /> -->
</beans>